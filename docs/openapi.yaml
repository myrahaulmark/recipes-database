swagger: "2.0"
info:
  title: Recipe Database API
  description: API for managing recipes.
  version: "1.0.0"

host: localhost:5000
basePath: /api
schemes:
  - http

tags:
  - name: Categories
    description: Operations related to categories
  - name: Users
    description: Operations related to users
  - name: Reviews
    description: Operations related to reviews
  - name: Ingredients
    description: Operations related to ingredients
  - name: Recipes
    description: Operations related to recipes
  - name: Instructions
    description: Operations related to instructions    

paths:
  /categories:
    get:
      summary: Retrieve all recipe categories
      description: Fetches all available recipe categories.
      tags:
        - Categories
      responses:
        '200':
          description: A list of categories.
          schema:
            type: array
            items:
              type: object
              properties:
                CategoryID:
                  type: integer
                  example: 1
                CategoryName:
                  type: string
                  example: Italian

  /users:
    get:
      summary: Retrieve users filtered by last name
      description: Fetches a list of users based on a last name filter.
      tags:
        - Users
      parameters:
        - in: query
          name: name
          required: true
          description: The string to filter last names by.
          type: string
          example: Smith
        - in: query
          name: starts_with
          required: false
          description: If true, filters users whose last names start with the provided string.
          type: boolean
          default: true
      responses:
        '200':
          description: A list of users matching the filter criteria.
          schema:
            type: array
            items:
              type: object
              properties:
                UserID:
                  type: integer
                  example: 1
                FirstName:
                  type: string
                  example: John
                LastName:
                  type: string
                  example: Smith
                Email:
                  type: string
                  example: john.smith@example.com

    post:
      summary: Add a new user
      description: Adds a new user to the database.
      tags:
        - Users
      parameters:
        - in: body
          name: user
          description: The user to create.
          schema:
            type: object
            required:
              - FirstName
              - LastName
              - Email
            properties:
              FirstName:
                type: string
                example: John
              LastName:
                type: string
                example: Doe
              Email:
                type: string
                example: johndoe@example.com
      responses:
        '201':
          description: User created successfully.

  /users/{UserID}:
    delete:
      summary: Delete a user
      description: Deletes a user identified by `UserID`.
      tags:
        - Users
      parameters:
        - in: path
          name: UserID
          required: true
          description: The ID of the user to delete.
          type: integer
      responses:
        '200':
          description: User deleted successfully.
        '404':
          description: User not found.

    put:
      summary: Update an existing user
      description: Updates a user's details by UserID.
      tags:
        - Users
      parameters:
        - in: path
          name: UserID
          required: true
          description: The ID of the user to update.
          type: integer
        - in: body
          name: user
          description: User information to update.
          schema:
            type: object
            properties:
              FirstName:
                type: string
                example: "John"
              LastName:
                type: string
                example: "Doe"
              Email:
                type: string
                example: "john.doe@example.com"
      responses:
        '200':
          description: User updated successfully.
        '404':
          description: User not found.
        '400':
          description: Required fields missing in the request body.

  /Reviews/{RecipeID}:
    get:
      summary: Retrieve reviews for a specific recipe
      description: Retrieves review information for a recipe identified by `RecipeID`.
      tags:
        - Reviews
      parameters:
        - in: path
          name: RecipeID
          required: true
          type: integer
          description: The unique identifier of the recipe
      responses:
        '200':
          description: A list of reviews for the specified recipe.
          schema:
            type: array
            items:
              type: object
              properties:
                ReviewID:
                  type: integer
                  example: 1
                RecipeID:
                  type: integer
                  example: 101
                ReviewerName:
                  type: string
                  example: "Jane Doe"
                ReviewText:
                  type: string
                  example: "Delicious recipe, easy to follow!"
                Rating:
                  type: integer
                  example: 5
                ReviewDate:
                  type: string
                  format: date
                  example: "2023-10-10"
        '404':
          description: No reviews found for the specified RecipeID.
          schema:
            type: object
            properties:
              message:
                type: string
                example: "No reviews found"

  /ingredients/{recipe_id}:
    get:
      summary: Retrieve ingredients for a specific recipe
      description: Fetches all ingredients for a given recipe ID.
      tags:
        - Ingredients
      parameters:
        - in: path
          name: recipe_id
          required: true
          description: The ID of the recipe to retrieve ingredients for.
          type: integer
          example: 101
      responses:
        '200':
          description: A list of ingredients for the specified recipe.
          schema:
            type: array
            items:
              type: object
              properties:
                Ingredient:
                  type: string
                  example: "Salt"
                IngredientsId:
                  type: integer
                  example: 101007
        '404':
          description: No ingredients found for the specified RecipeID.
          schema:
            type: object
            properties:
              message:
                type: string
                example: "No ingredients found for this recipe"

  /recipes/limited:
    get:
      summary: Retrieve a limited number of recipes
      description: Fetches a limited number of recipes. By default, returns up to 10 recipes.
      tags:
        - Recipes
      parameters:
        - in: query
          name: limit
          required: false
          description: The maximum number of recipes to retrieve.
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: A list of recipes.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    RecipeID:
                      type: integer
                      example: 1
                    Title:
                      type: string
                      example: "Spaghetti Bolognese"
                    Description:
                      type: string
                      example: "A classic Italian pasta dish."
                    SubmittedDate:
                      type: string
                      format: date
                      example: "2023-11-01"
                    CookingTime:
                      type: integer
                      example: 45
                    Servings:
                      type: integer
                      example: 4
        '404':
          description: No recipes found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No recipes found"
  /recipes/{recipe_id}:
    get:
      summary: Get a specific recipe
      description: Retrieve a specific recipe by its RecipeID, including ingredients, instructions, and reviews.
      parameters:
        - name: recipe_id
          in: path
          required: true
          description: The ID of the recipe to retrieve.
          schema:
            type: integer
      responses:
        '200':
          description: Recipe details successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  RecipeID:
                    type: integer
                  Title:
                    type: string
                  Description:
                    type: string
                  CookingTime:
                    type: integer
                  Servings:
                    type: integer
                  ImageURL:
                    type: string
                  Ingredients:
                    type: array
                    items:
                      type: string
                  Instructions:
                    type: array
                    items:
                      type: string
                  Reviews:
                    type: array
                    items:
                      type: string
        '404':
          description: Recipe not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  
  
  /instructions/{recipe_title}:
      get:
        summary: Retrieve instructions by recipe_title
        description: Fetches a list of instructions based on a recipe_title.
        tags:
          - Instructions
        parameters:
          - in: path
            name: recipe_title
            required: true
            description: The title of the recipe to fetch instructions for.
            schema:
              type: string
              example: "Remove seeds"
        responses:
          '200':
            description: A list of instructions matching the recipe_title.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      StepCount:
                        type: integer
                        example: 1
                      Instruction:
                        type: string
                        example: "Remove seeds"
          '404':
            description: No instructions found for the given recipe title.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "No instructions found for this recipe"

  /recipes/appetizers/random:
      get:
        summary: Get Random Appetizer Recipes
        description: Fetches up to 6 random recipes from the 'Appetizers' category.
        tags:
        - Recipes
        responses:
          200:
            description: Successful response with up to 6 random appetizer recipes.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    recipes:
                      type: array
                      items:
                        type: object
                        properties:
                          RecipeID:
                            type: integer
                          RecipeName:
                            type: string
                          Description:
                            type: string
                          CookingTime:
                            type: integer
                          Servings:
                            type: integer
                          ImageURL:
                            type: string
          404:
            description: No recipes found in Appetizers category.
          500:
            description: Server error.


  /recipes/appetizers/search:
    get:
      summary: Search Appetizers by Keyword
      description: >
        Fetch a list of appetizer recipes by searching for a keyword in their titles.
        Returns up to 5 matching results, including recipe ID, title, and image URL.
      parameters:
        - name: q
          in: query
          description: The keyword to search for in appetizer titles.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of matching appetizer recipes.
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipes:
                    type: array
                    items:
                      type: object
                      properties:
                        RecipeID:
                          type: integer
                          description: The ID of the recipe.
                        Title:
                          type: string
                          description: The title of the recipe.
                        ImageURL:
                          type: string
                          format: uri
                          description: A URL pointing to an image of the recipe.
        '400':
          description: A required keyword was not provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Keyword is required
        '404':
          description: No matching appetizers found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No matching appetizers found
        '500':
          description: An error occurred while processing the request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

 /recipes/soups/search:
    get:
      summary: Search soups by Keyword
      description: >
        Fetch a list of soup recipes by searching for a keyword in their titles.
        Returns up to 5 matching results, including recipe ID, title, and image URL.
      parameters:
        - name: q
          in: query
          description: The keyword to search for in soup titles.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of matching soup recipes.
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipes:
                    type: array
                    items:
                      type: object
                      properties:
                        RecipeID:
                          type: integer
                          description: The ID of the recipe.
                        Title:
                          type: string
                          description: The title of the recipe.
                        ImageURL:
                          type: string
                          format: uri
                          description: A URL pointing to an image of the recipe.
        '400':
          description: A required keyword was not provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Keyword is required
        '404':
          description: No matching soup recipes found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No matching soup recipes found
        '500':
          description: An error occurred while processing the request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error


  /recipes/search-by-ingredients:
    get:
      summary: Search Recipes by Ingredients
      description: >
        Fetch a list of recipes that match all the specified ingredients.
        Returns recipes with RecipeID, Title, and ImageURL.
      parameters:
        - name: ingredients
          in: query
          description: List of ingredients to search for.
          required: true
          schema:
            type: array
            items:
              type: string
            example: ["chicken", "cheese", "milk"]
      responses:
        '200':
          description: A list of matching recipes.
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipes:
                    type: array
                    items:
                      type: object
                      properties:
                        RecipeID:
                          type: integer
                          description: The ID of the recipe.
                        Title:
                          type: string
                          description: The title of the recipe.
                        ImageURL:
                          type: string
                          format: uri
                          description: A URL pointing to an image of the recipe.
        '400':
          description: At least one ingredient was not provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: At least one ingredient is required
        '404':
          description: No matching recipes found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No matching recipes found
        '500':
          description: An error occurred while processing the request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error
